name: CI

on:
  # Triggers the workflow on push or pull request events but only for the
  # "coverage-badge-action" branch and when at least one path matches a pattern
  # in the `paths` filter.
  push:
    branches:
      - coverage-badge-action
    paths:
      - .github/**
      - src/**
      - tests/**
      - package.json
  pull_request:
    branches:
      - coverage-badge-action
    paths:
      - .github/**
      - src/**
      - tests/**
      - package.json

  # Allows one to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    name: Node.js v${{ matrix.nodejs }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    strategy:
      matrix:
        nodejs:
          # - 12
          - 14
          - 16
        os:
          - ubuntu-latest
          # - windows-latest
          # - macOS-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.nodejs }}

      - name: Install dependencies
        run: npm install --no-fund

      - name: Test with coverage
        continue-on-error: true
        run: npm run test:coverage

      - name: Report coverage
        id: report
        if: ${{ matrix.nodejs >= 16 && matrix.os == 'ubuntu-latest' }}
        continue-on-error: true
        # Coverage Notes:
        #
        # 1. Using `c8 check-coverage` for a more succinct output, to extract the
        #    total of each metric, compared to reporters like "json-summary".
        # 2. Using a coverage threshold of "101" to ensure `c8` returns all four
        #    metrics to calculate the total average.
        # 3. In case `c8` does not return all four metrics, the script will
        #    assume they are missing because they exceed the threshold somehow,
        #    and have `awk` compensate by adding in the missing counts as 100%.
        run: |
          REPORT=$(npx c8 check-coverage --lines 101 --functions 101 --branches 101 --statements 101 2>&1 > /dev/null || true)

          COVERAGE=$( \
            echo $REPORT | \
            grep '(?<=lines |functions |branches |statements )\((\d*\.?\d+)%\)' -Po | \
            grep '\d*\.?\d+' -Po | \
            awk '{ SUM += $1 } END { print (NR > 0) ? int((SUM + ((4 - NR) * 100)) / 4) : "NaN" }'
          )

          if ! (( $COVERAGE >= 0 )) 2> /dev/null; then
            echo "Coverage is not a positive number: $COVERAGE"
            exit 1
          fi

          BRANCH=${GITHUB_REF#refs/heads/}

          echo "Covered Branch: $BRANCH"
          echo "Total Coverage: $COVERAGE%"

          if (( $COVERAGE > 100 )); then
            COVERAGE=100
            echo "â†³ Corrected to 100%"
          fi

          echo "::set-output name=branch::$BRANCH"
          echo "::set-output name=coverage::$COVERAGE"
    outputs:
      # Assign default values to ensure `needs` context
      # is defined in dependdent job.
      branch: ${{ steps.report.outputs.branch || null }}
      coverage: ${{ steps.report.outputs.coverage || 'NaN' }}

  badge:
    name: Update coverage badge
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: test
    if: ${{ success() && needs.test.outputs.branch && needs.test.outputs.coverage >= 0 && (github.event_name == 'workflow_dispatch' || github.event_name == 'push') }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out storage branch
        uses: actions/checkout@v2
        with:
          ref: gh-storage

      - name: Prepare storage directory
        if: ${{ success() && needs.test.outputs.branch }}
        run: mkdir -p ${{ needs.test.outputs.branch }}

      - name: Prepare badge
        id: parameters
        # Badge Colors:
        #
        # | Service    | Unknown   | 100%        | > 75%  | > 50%  | > 25%  | >= 0 |
        # | ---------- |
        # | shields.io | lightgrey | brightgreen | green  | yellow | orange | red  |
        # | badgen.net | grey      | green       | 99CC09 | yellow | orange | red  |
        run: |
          TOTAL=${{ needs.test.outputs.coverage }}
          COLOR=grey

          if (( $TOTAL == 100 )); then
            COLOR=green
          elif (( $TOTAL > 75 )); then
            COLOR=99CC09
          elif (( $TOTAL > 50 )); then
            COLOR=yellow
          elif (( $TOTAL > 25 )); then
            COLOR=orange
          elif (( $TOTAL >= 0 )); then
            COLOR=red
          fi

          echo "::set-output name=color::$COLOR"
          echo "::set-output name=path::${{ needs.test.outputs.branch }}/coverage-badge.svg"

      - name: Update badge
        id: badge
        if: ${{ success() && steps.parameters.outputs.path }}
        env:
          BADGE_STATUS: ${{ needs.test.outputs.coverage }}
          BADGE_COLOR: ${{ steps.parameters.outputs.color }}
          BADGE_PATH: ${{ steps.parameters.outputs.path }}
        # Badge URI:
        #
        # - https://img.shields.io/badge/coverage-${BADGE_MESSAGE}%25-${BADGE_COLOR}?style=flat-square
        # - https://flat.badgen.net/badge/coverage/${BADGE_MESSAGE}%25/${BADGE_COLOR}
        run: |
          curl -fsS "https://flat.badgen.net/badge/coverage/${BADGE_STATUS}%25/${BADGE_COLOR}" -o ${BADGE_PATH}

          if [[ -z "$(GIT_OPTIONAL_LOCKS=0 git status --porcelain --ignore-submodules -unormal)" ]]; then
            echo "Nothing to commit"
            exit 0
          fi

          echo "::set-output name=updated::1"

      - name: Commit badge
        id: commit
        if: ${{ success() && steps.badge.outputs.updated && steps.parameters.outputs.path }}
        env:
          COVERAGE_PCT: ${{ needs.test.outputs.coverage }}%
          BADGE_PATH: ${{ steps.parameters.outputs.path }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add $BADGE_PATH
          git commit -m "Update coverage badge to $COVERAGE_PCT"
          git push
