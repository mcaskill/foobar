name: Chores

on:
  # Triggers the workflow on push or pull request events but only for the
  # "coverage-badge-action" branch and when at least one path matches a pattern
  # in the `paths` filter.
  push:
    branches:
      - coverage-badge-action
    paths:
      - .github/**
      - src/**
      - tests/**
      - package-lock.json
      - package.json
  pull_request:
    branches:
      - coverage-badge-action
    paths:
      - .github/**
      - src/**
      - tests/**
      - package-lock.json
      - package.json

  # Allows one to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  coverage:
    name: Check coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.npm
          key: ubuntu-latest-node-16-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ubuntu-latest-node-16-
            ubuntu-latest-node-

      - run: npm ci
      - name: Check coverage
        id: report
        # Coverage Notes:
        #
        # 1. Using `c8 check-coverage` for a more succinct output, to extract the
        #    total of each metric, compared to reporters like "json-summary".
        # 2. Using a coverage threshold of "101" to ensure `c8` returns all four
        #    metrics to calculate the average total percentage.
        # 3. In case `c8` does not return all four metrics, the script will
        #    assume they are missing because they exceed the threshold somehow,
        #    and have `awk` compensate by adding in the missing counts as 100%.
        # 4. If by some freak occurrence, the total percentage is above 100%,
        #    clamp it down to 100%.
        run: |
          npx c8 --include=src npm run test:quiet 2>&1 > /dev/null || true

          REPORT=$(npx c8 check-coverage --lines 101 --functions 101 --branches 101 --statements 101 2>&1 > /dev/null || true)

          COVERAGE=$( \
            echo $REPORT | \
            grep '(?<=lines |functions |branches |statements )\((\d*\.?\d+)%\)' -Po | \
            grep '\d*\.?\d+' -Po | \
            awk '{ SUM += $1 } END { print (NR > 0) ? int((SUM + ((4 - NR) * 100)) / 4) : "NaN" }'
          )

          if ! (( $COVERAGE >= 0 )) 2> /dev/null; then
            echo "Coverage is not a positive number: $COVERAGE"
            exit 1
          fi

          BRANCH=${GITHUB_REF#refs/heads/}

          echo "Covered Branch: $BRANCH"
          echo "Total Coverage: $COVERAGE%"

          if (( $COVERAGE > 100 )); then
            COVERAGE=100
            echo "â†³ Corrected to 100%"
          fi

          echo "::set-output name=branch::$BRANCH"
          echo "::set-output name=total::$COVERAGE"
    outputs:
      # Assign default values to ensure `needs` context
      # is defined in dependdent job.
      branch: ${{ steps.report.outputs.branch || null }}
      total: ${{ steps.report.outputs.total || 'NaN' }}

  badge:
    name: Update coverage badge
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: coverage
    if: ${{ needs.coverage.outputs.branch && needs.coverage.outputs.total >= 0 && (github.event_name == 'workflow_dispatch' || github.event_name == 'push') }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out storage branch
        uses: actions/checkout@v2
        with:
          ref: gh-storage

      - name: Prepare storage directory
        run: mkdir -p ${{ needs.coverage.outputs.branch }}

      - name: Prepare badge
        id: parameters
        # Badge Colors:
        #
        # | Service    | Unknown   | 100%        | > 75%  | > 50%  | > 25%  | >= 0 |
        # | ---------- | --------- | ----------- | ------ | ------ | ------ | ---- |
        # | shields.io | lightgrey | brightgreen | green  | yellow | orange | red  |
        # | badgen.net | grey      | green       | 99CC09 | yellow | orange | red  |
        run: |
          TOTAL=${{ needs.coverage.outputs.total }}
          COLOR=grey

          if (( $TOTAL == 100 )); then
            COLOR=green
          elif (( $TOTAL > 75 )); then
            COLOR=99CC09
          elif (( $TOTAL > 50 )); then
            COLOR=yellow
          elif (( $TOTAL > 25 )); then
            COLOR=orange
          elif (( $TOTAL >= 0 )); then
            COLOR=red
          fi

          echo "::set-output name=color::$COLOR"
          echo "::set-output name=path::${{ needs.coverage.outputs.branch }}/coverage-badge.svg"

      - name: Update badge
        id: badge
        env:
          BADGE_STATUS: ${{ needs.coverage.outputs.total }}
          BADGE_COLOR: ${{ steps.parameters.outputs.color }}
          BADGE_PATH: ${{ steps.parameters.outputs.path }}
        # Badge URI:
        #
        # - https://img.shields.io/badge/coverage-${BADGE_STATUS}%25-${BADGE_COLOR}?style=flat-square
        # - https://flat.badgen.net/badge/coverage/${BADGE_STATUS}%25/${BADGE_COLOR}
        run: |
          curl -fsS "https://img.shields.io/badge/coverage-${BADGE_STATUS}%25-${BADGE_COLOR}?style=flat-square" -o ${BADGE_PATH}

          if [[ -z "$(GIT_OPTIONAL_LOCKS=0 git status --porcelain --ignore-submodules -unormal)" ]]; then
            echo "Nothing to commit"
            exit 1
          fi

          echo "::set-output name=updated::1"

      - name: Commit badge
        id: commit
        if: ${{ steps.badge.outputs.updated }}
        env:
          COVERAGE_TOTAL: ${{ needs.coverage.outputs.total }}%
          BADGE_PATH: ${{ steps.parameters.outputs.path }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add $BADGE_PATH
          git commit -m "Update coverage badge to $COVERAGE_TOTAL"
          git push
